{
  "header_types" : [
    {
      "name" : "scalars_0",
      "id" : 0,
      "fields" : [
        ["tmp", 32, false],
        ["metadata._fwd_metadata_hash10", 16, false],
        ["metadata._fwd_metadata_nexthop_type1", 1, false],
        ["metadata._fwd_metadata_ecmp_group_idx2", 10, false],
        ["metadata._fwd_metadata_ecmp_path_selector3", 8, false],
        ["metadata._fwd_metadata_l2ptr4", 32, false],
        ["metadata._fwd_metadata_out_bd5", 24, false],
        ["_padding_0", 5, false]
      ]
    },
    {
      "name" : "ipv4_t",
      "id" : 1,
      "fields" : [
        ["version", 4, false],
        ["ihl", 4, false],
        ["diffserv", 8, false],
        ["totalLen", 16, false],
        ["identification", 16, false],
        ["flags", 3, false],
        ["fragOffset", 13, false],
        ["ttl", 8, false],
        ["protocol", 8, false],
        ["hdrChecksum", 16, false],
        ["srcAddr", 32, false],
        ["dstAddr", 32, false]
      ]
    },
    {
      "name" : "standard_metadata",
      "id" : 2,
      "fields" : [
        ["ingress_port", 9, false],
        ["egress_spec", 9, false],
        ["egress_port", 9, false],
        ["clone_spec", 32, false],
        ["instance_type", 32, false],
        ["drop", 1, false],
        ["recirculate_port", 16, false],
        ["packet_length", 32, false],
        ["enq_timestamp", 32, false],
        ["enq_qdepth", 19, false],
        ["deq_timedelta", 32, false],
        ["deq_qdepth", 19, false],
        ["ingress_global_timestamp", 48, false],
        ["egress_global_timestamp", 48, false],
        ["lf_field_list", 32, false],
        ["mcast_grp", 16, false],
        ["resubmit_flag", 32, false],
        ["egress_rid", 16, false],
        ["checksum_error", 1, false],
        ["recirculate_flag", 32, false],
        ["parser_error", 32, false],
        ["_padding", 5, false]
      ]
    },
    {
      "name" : "ethernet_t",
      "id" : 3,
      "fields" : [
        ["dstAddr", 48, false],
        ["srcAddr", 48, false],
        ["etherType", 16, false]
      ]
    }
  ],
  "headers" : [
    {
      "name" : "hdr_1_ipv4",
      "id" : 0,
      "header_type" : "ipv4_t",
      "metadata" : false,
      "pi_omit" : true
    },
    {
      "name" : "scalars",
      "id" : 1,
      "header_type" : "scalars_0",
      "metadata" : true,
      "pi_omit" : true
    },
    {
      "name" : "standard_metadata",
      "id" : 2,
      "header_type" : "standard_metadata",
      "metadata" : true,
      "pi_omit" : true
    },
    {
      "name" : "ethernet",
      "id" : 3,
      "header_type" : "ethernet_t",
      "metadata" : false,
      "pi_omit" : true
    },
    {
      "name" : "ipv4",
      "id" : 4,
      "header_type" : "ipv4_t",
      "metadata" : false,
      "pi_omit" : true
    }
  ],
  "header_stacks" : [],
  "header_union_types" : [],
  "header_unions" : [],
  "header_union_stacks" : [],
  "field_lists" : [],
  "errors" : [
    ["NoError", 0],
    ["PacketTooShort", 1],
    ["NoMatch", 2],
    ["StackOutOfBounds", 3],
    ["HeaderTooShort", 4],
    ["ParserTimeout", 5]
  ],
  "enums" : [],
  "parsers" : [
    {
      "name" : "parser",
      "id" : 0,
      "init_state" : "start",
      "parse_states" : [
        {
          "name" : "start",
          "id" : 0,
          "parser_ops" : [
            {
              "parameters" : [
                {
                  "type" : "regular",
                  "value" : "ethernet"
                }
              ],
              "op" : "extract"
            }
          ],
          "transitions" : [
            {
              "type" : "hexstr",
              "value" : "0x0800",
              "mask" : null,
              "next_state" : "parse_ipv4"
            },
            {
              "value" : "default",
              "mask" : null,
              "next_state" : null
            }
          ],
          "transition_key" : [
            {
              "type" : "field",
              "value" : ["ethernet", "etherType"]
            }
          ]
        },
        {
          "name" : "parse_ipv4",
          "id" : 1,
          "parser_ops" : [
            {
              "parameters" : [
                {
                  "type" : "regular",
                  "value" : "ipv4"
                }
              ],
              "op" : "extract"
            }
          ],
          "transitions" : [
            {
              "value" : "default",
              "mask" : null,
              "next_state" : null
            }
          ],
          "transition_key" : []
        }
      ]
    }
  ],
  "parse_vsets" : [],
  "deparsers" : [
    {
      "name" : "deparser",
      "id" : 0,
      "source_info" : {
        "filename" : "demo5.p4_16_with_mirroring_rules.p4",
        "line" : 385,
        "column" : 8,
        "source_fragment" : "DeparserImpl"
      },
      "order" : ["ethernet", "ipv4"]
    }
  ],
  "meter_arrays" : [],
  "counter_arrays" : [
    {
      "name" : "ingress.ipv4_da_lpm_stats",
      "id" : 0,
      "is_direct" : true,
      "binding" : "ingress.ipv4_da_lpm",
      "source_info" : {
        "filename" : "demo5.p4_16_with_mirroring_rules.p4",
        "line" : 128,
        "column" : 40,
        "source_fragment" : "ipv4_da_lpm_stats"
      }
    }
  ],
  "register_arrays" : [],
  "calculations" : [
    {
      "name" : "calc",
      "id" : 0,
      "algo" : "crc16",
      "input" : [
        {
          "type" : "field",
          "value" : ["ipv4", "protocol"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "srcAddr"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "dstAddr"]
        }
      ]
    },
    {
      "name" : "calc_0",
      "id" : 1,
      "algo" : "identity",
      "input" : [
        {
          "type" : "field",
          "value" : ["scalars", "metadata._fwd_metadata_hash10"]
        }
      ]
    },
    {
      "name" : "calc_1",
      "id" : 2,
      "source_info" : {
        "filename" : "demo5.p4_16_with_mirroring_rules.p4",
        "line" : 412,
        "column" : 8,
        "source_fragment" : "update_checksum(hdr.ipv4.isValid() && hdr.ipv4.ihl == 5, ..."
      },
      "algo" : "csum16",
      "input" : [
        {
          "type" : "field",
          "value" : ["ipv4", "version"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "ihl"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "diffserv"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "totalLen"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "identification"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "flags"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "fragOffset"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "ttl"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "protocol"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "srcAddr"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "dstAddr"]
        }
      ]
    },
    {
      "name" : "calc_2",
      "id" : 3,
      "source_info" : {
        "filename" : "demo5.p4_16_with_mirroring_rules.p4",
        "line" : 394,
        "column" : 8,
        "source_fragment" : "verify_checksum(hdr.ipv4.isValid() && hdr.ipv4.ihl == 5, ..."
      },
      "algo" : "csum16",
      "input" : [
        {
          "type" : "field",
          "value" : ["ipv4", "version"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "ihl"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "diffserv"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "totalLen"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "identification"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "flags"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "fragOffset"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "ttl"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "protocol"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "srcAddr"]
        },
        {
          "type" : "field",
          "value" : ["ipv4", "dstAddr"]
        }
      ]
    }
  ],
  "learn_lists" : [],
  "actions" : [
    {
      "name" : "top_level_action",
      "id" : 0,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "assign_header",
          "parameters" : [
            {
              "type" : "header",
              "value" : "hdr_1_ipv4"
            },
            {
              "type" : "header",
              "value" : "ipv4"
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 228,
            "column" : 29,
            "source_fragment" : "hdr"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["hdr_1_ipv4", "diffserv"]
            },
            {
              "type" : "hexstr",
              "value" : "0x09"
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 113,
            "column" : 4,
            "source_fragment" : "hdr.ipv4.diffserv = true ? 9"
          }
        },
        {
          "op" : "assign_header",
          "parameters" : [
            {
              "type" : "header",
              "value" : "ipv4"
            },
            {
              "type" : "header",
              "value" : "hdr_1_ipv4"
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 228,
            "column" : 29,
            "source_fragment" : "hdr"
          }
        }
      ]
    },
    {
      "name" : "NoAction",
      "id" : 1,
      "runtime_data" : [],
      "primitives" : []
    },
    {
      "name" : "NoAction",
      "id" : 2,
      "runtime_data" : [],
      "primitives" : []
    },
    {
      "name" : "my_drop",
      "id" : 3,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "drop",
          "parameters" : [],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 74,
            "column" : 4,
            "source_fragment" : "mark_to_drop()"
          }
        }
      ]
    },
    {
      "name" : "my_drop",
      "id" : 4,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "drop",
          "parameters" : [],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 74,
            "column" : 4,
            "source_fragment" : "mark_to_drop()"
          }
        }
      ]
    },
    {
      "name" : "ingress.compute_lkp_ipv4_hash",
      "id" : 5,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "modify_field_with_hash_based_offset",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "metadata._fwd_metadata_hash10"]
            },
            {
              "type" : "hexstr",
              "value" : "0x0000"
            },
            {
              "type" : "calculation",
              "value" : "calc"
            },
            {
              "type" : "hexstr",
              "value" : "0x00010000"
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 134,
            "column" : 8,
            "source_fragment" : "hash(meta.fwd_metadata.hash1, HashAlgorithm.crc16, ..."
          }
        }
      ]
    },
    {
      "name" : "ingress.doNothing1",
      "id" : 6,
      "runtime_data" : [],
      "primitives" : []
    },
    {
      "name" : "ingress.doNothing2",
      "id" : 7,
      "runtime_data" : [],
      "primitives" : []
    },
    {
      "name" : "ingress.set_l2ptr_with_stat",
      "id" : 8,
      "runtime_data" : [
        {
          "name" : "l2ptr",
          "bitwidth" : 32
        }
      ],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "metadata._fwd_metadata_nexthop_type1"]
            },
            {
              "type" : "hexstr",
              "value" : "0x00"
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 52,
            "column" : 41,
            "source_fragment" : "0: 0; ..."
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "metadata._fwd_metadata_l2ptr4"]
            },
            {
              "type" : "runtime_data",
              "value" : 0
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 165,
            "column" : 8,
            "source_fragment" : "meta.fwd_metadata.l2ptr = l2ptr"
          }
        }
      ]
    },
    {
      "name" : "ingress.set_ecmp_group_idx",
      "id" : 9,
      "runtime_data" : [
        {
          "name" : "ecmp_group_idx",
          "bitwidth" : 10
        }
      ],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "metadata._fwd_metadata_nexthop_type1"]
            },
            {
              "type" : "hexstr",
              "value" : "0x01"
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 53,
            "column" : 50,
            "source_fragment" : "1 : 0; ..."
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "metadata._fwd_metadata_ecmp_group_idx2"]
            },
            {
              "type" : "runtime_data",
              "value" : 0
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 172,
            "column" : 12,
            "source_fragment" : "meta.fwd_metadata.ecmp_group_idx = ecmp_group_idx"
          }
        }
      ]
    },
    {
      "name" : "ingress.my_drop_with_stat",
      "id" : 10,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "drop",
          "parameters" : [],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 177,
            "column" : 8,
            "source_fragment" : "mark_to_drop()"
          }
        }
      ]
    },
    {
      "name" : "ingress.my_drop_with_stat_aatish",
      "id" : 11,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "drop",
          "parameters" : [],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 185,
            "column" : 16,
            "source_fragment" : "mark_to_drop()"
          }
        }
      ]
    },
    {
      "name" : "ingress.set_ecmp_path_idx",
      "id" : 12,
      "runtime_data" : [
        {
          "name" : "num_paths",
          "bitwidth" : 8
        }
      ],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "tmp"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "&",
                  "left" : {
                    "type" : "local",
                    "value" : 0
                  },
                  "right" : {
                    "type" : "hexstr",
                    "value" : "0xffffffff"
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 206,
            "column" : 55,
            "source_fragment" : "(bit<32>)num_paths"
          }
        },
        {
          "op" : "modify_field_with_hash_based_offset",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "metadata._fwd_metadata_ecmp_path_selector3"]
            },
            {
              "type" : "hexstr",
              "value" : "0x0000"
            },
            {
              "type" : "calculation",
              "value" : "calc_0"
            },
            {
              "type" : "field",
              "value" : ["scalars", "tmp"]
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 205,
            "column" : 8,
            "source_fragment" : "hash(meta.fwd_metadata.ecmp_path_selector, HashAlgorithm.identity, ..."
          }
        }
      ]
    },
    {
      "name" : "ingress.set_l2ptr",
      "id" : 13,
      "runtime_data" : [
        {
          "name" : "l2ptr",
          "bitwidth" : 32
        }
      ],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "metadata._fwd_metadata_nexthop_type1"]
            },
            {
              "type" : "hexstr",
              "value" : "0x00"
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 52,
            "column" : 41,
            "source_fragment" : "0: 0; ..."
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "metadata._fwd_metadata_l2ptr4"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "|",
                  "left" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "&",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : ">>",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "&",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "|",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "&",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : ">>",
                                          "left" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "&",
                                              "left" : {
                                                "type" : "local",
                                                "value" : 0
                                              },
                                              "right" : {
                                                "type" : "hexstr",
                                                "value" : "0xaaaaaaaa"
                                              }
                                            }
                                          },
                                          "right" : {
                                            "type" : "hexstr",
                                            "value" : "0x1"
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "hexstr",
                                        "value" : "0xffffffff"
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "&",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<<",
                                          "left" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "&",
                                              "left" : {
                                                "type" : "local",
                                                "value" : 0
                                              },
                                              "right" : {
                                                "type" : "hexstr",
                                                "value" : "0x55555555"
                                              }
                                            }
                                          },
                                          "right" : {
                                            "type" : "hexstr",
                                            "value" : "0x1"
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "hexstr",
                                        "value" : "0xffffffff"
                                      }
                                    }
                                  }
                                }
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0xaaaaaaaa"
                              }
                            }
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x1"
                          }
                        }
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0xffffffff"
                      }
                    }
                  },
                  "right" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "&",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "<<",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "&",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "|",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "&",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : ">>",
                                          "left" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "&",
                                              "left" : {
                                                "type" : "local",
                                                "value" : 0
                                              },
                                              "right" : {
                                                "type" : "hexstr",
                                                "value" : "0xaaaaaaaa"
                                              }
                                            }
                                          },
                                          "right" : {
                                            "type" : "hexstr",
                                            "value" : "0x1"
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "hexstr",
                                        "value" : "0xffffffff"
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "&",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<<",
                                          "left" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "&",
                                              "left" : {
                                                "type" : "local",
                                                "value" : 0
                                              },
                                              "right" : {
                                                "type" : "hexstr",
                                                "value" : "0x55555555"
                                              }
                                            }
                                          },
                                          "right" : {
                                            "type" : "hexstr",
                                            "value" : "0x1"
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "hexstr",
                                        "value" : "0xffffffff"
                                      }
                                    }
                                  }
                                }
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0x55555555"
                              }
                            }
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x1"
                          }
                        }
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0xffffffff"
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 218,
            "column" : 18,
            "source_fragment" : "((myl2ptr & 0xaaaaaaaa) >> 1) | ((myl2ptr & 0x55555555) << 1); ..."
          }
        }
      ]
    },
    {
      "name" : "ingress.set_l2ptr",
      "id" : 14,
      "runtime_data" : [
        {
          "name" : "l2ptr",
          "bitwidth" : 32
        }
      ],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "metadata._fwd_metadata_nexthop_type1"]
            },
            {
              "type" : "hexstr",
              "value" : "0x00"
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 52,
            "column" : 41,
            "source_fragment" : "0: 0; ..."
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "metadata._fwd_metadata_l2ptr4"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "|",
                  "left" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "&",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : ">>",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "&",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "|",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "&",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : ">>",
                                          "left" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "&",
                                              "left" : {
                                                "type" : "local",
                                                "value" : 0
                                              },
                                              "right" : {
                                                "type" : "hexstr",
                                                "value" : "0xaaaaaaaa"
                                              }
                                            }
                                          },
                                          "right" : {
                                            "type" : "hexstr",
                                            "value" : "0x1"
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "hexstr",
                                        "value" : "0xffffffff"
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "&",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<<",
                                          "left" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "&",
                                              "left" : {
                                                "type" : "local",
                                                "value" : 0
                                              },
                                              "right" : {
                                                "type" : "hexstr",
                                                "value" : "0x55555555"
                                              }
                                            }
                                          },
                                          "right" : {
                                            "type" : "hexstr",
                                            "value" : "0x1"
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "hexstr",
                                        "value" : "0xffffffff"
                                      }
                                    }
                                  }
                                }
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0xaaaaaaaa"
                              }
                            }
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x1"
                          }
                        }
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0xffffffff"
                      }
                    }
                  },
                  "right" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "&",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "<<",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "&",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "|",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "&",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : ">>",
                                          "left" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "&",
                                              "left" : {
                                                "type" : "local",
                                                "value" : 0
                                              },
                                              "right" : {
                                                "type" : "hexstr",
                                                "value" : "0xaaaaaaaa"
                                              }
                                            }
                                          },
                                          "right" : {
                                            "type" : "hexstr",
                                            "value" : "0x1"
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "hexstr",
                                        "value" : "0xffffffff"
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "&",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "<<",
                                          "left" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "&",
                                              "left" : {
                                                "type" : "local",
                                                "value" : 0
                                              },
                                              "right" : {
                                                "type" : "hexstr",
                                                "value" : "0x55555555"
                                              }
                                            }
                                          },
                                          "right" : {
                                            "type" : "hexstr",
                                            "value" : "0x1"
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "hexstr",
                                        "value" : "0xffffffff"
                                      }
                                    }
                                  }
                                }
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0x55555555"
                              }
                            }
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x1"
                          }
                        }
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0xffffffff"
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 218,
            "column" : 18,
            "source_fragment" : "((myl2ptr & 0xaaaaaaaa) >> 1) | ((myl2ptr & 0x55555555) << 1); ..."
          }
        }
      ]
    },
    {
      "name" : "ingress.set_bd_dmac_intf",
      "id" : 15,
      "runtime_data" : [
        {
          "name" : "bd",
          "bitwidth" : 24
        },
        {
          "name" : "dmac",
          "bitwidth" : 48
        },
        {
          "name" : "intf",
          "bitwidth" : 9
        }
      ],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["scalars", "metadata._fwd_metadata_out_bd5"]
            },
            {
              "type" : "runtime_data",
              "value" : 0
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 253,
            "column" : 8,
            "source_fragment" : "meta.fwd_metadata.out_bd = bd"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["ethernet", "dstAddr"]
            },
            {
              "type" : "runtime_data",
              "value" : 1
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 254,
            "column" : 8,
            "source_fragment" : "hdr.ethernet.dstAddr = dmac"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["standard_metadata", "egress_spec"]
            },
            {
              "type" : "runtime_data",
              "value" : 2
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 255,
            "column" : 8,
            "source_fragment" : "standard_metadata.egress_spec = intf"
          }
        }
      ]
    },
    {
      "name" : "ingress.set_bd_dmac_intf_continued_by_Aatish",
      "id" : 16,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["ipv4", "ttl"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "&",
                  "left" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "+",
                      "left" : {
                        "type" : "field",
                        "value" : ["ipv4", "ttl"]
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0xff"
                      }
                    }
                  },
                  "right" : {
                    "type" : "hexstr",
                    "value" : "0xff"
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 280,
            "column" : 8,
            "source_fragment" : "hdr.ipv4.ttl = hdr.ipv4.ttl - 1"
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["ipv4", "ttl"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "?",
                  "left" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "&",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "+",
                          "left" : {
                            "type" : "hexstr",
                            "value" : "0x03"
                          },
                          "right" : {
                            "type" : "field",
                            "value" : ["ipv4", "ttl"]
                          }
                        }
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0xff"
                      }
                    }
                  },
                  "right" : {
                    "type" : "field",
                    "value" : ["ipv4", "ttl"]
                  },
                  "cond" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "==",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "&",
                          "left" : {
                            "type" : "field",
                            "value" : ["ipv4", "dstAddr"]
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0x01"
                          }
                        }
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0x00"
                      }
                    }
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 282,
            "column" : 12,
            "source_fragment" : "hdr.ipv4.ttl ="
          }
        },
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["ipv4", "diffserv"]
            },
            {
              "type" : "hexstr",
              "value" : "0x05"
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 249,
            "column" : 8,
            "source_fragment" : "hdr.ipv4.diffserv = 5"
          }
        }
      ]
    },
    {
      "name" : "act",
      "id" : 17,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["ipv4", "identification"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "&",
                  "left" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "+",
                      "left" : {
                        "type" : "field",
                        "value" : ["ipv4", "identification"]
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0x0001"
                      }
                    }
                  },
                  "right" : {
                    "type" : "hexstr",
                    "value" : "0xffff"
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 345,
            "column" : 12,
            "source_fragment" : "hdr.ipv4.identification = hdr.ipv4.identification + 0x1"
          }
        }
      ]
    },
    {
      "name" : "act_0",
      "id" : 18,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["ipv4", "identification"]
            },
            {
              "type" : "expression",
              "value" : {
                "type" : "expression",
                "value" : {
                  "op" : "&",
                  "left" : {
                    "type" : "expression",
                    "value" : {
                      "op" : "+",
                      "left" : {
                        "type" : "expression",
                        "value" : {
                          "op" : "&",
                          "left" : {
                            "type" : "expression",
                            "value" : {
                              "op" : "+",
                              "left" : {
                                "type" : "expression",
                                "value" : {
                                  "op" : "&",
                                  "left" : {
                                    "type" : "expression",
                                    "value" : {
                                      "op" : "+",
                                      "left" : {
                                        "type" : "expression",
                                        "value" : {
                                          "op" : "&",
                                          "left" : {
                                            "type" : "expression",
                                            "value" : {
                                              "op" : "+",
                                              "left" : {
                                                "type" : "field",
                                                "value" : ["ipv4", "identification"]
                                              },
                                              "right" : {
                                                "type" : "hexstr",
                                                "value" : "0xfff8"
                                              }
                                            }
                                          },
                                          "right" : {
                                            "type" : "hexstr",
                                            "value" : "0xffff"
                                          }
                                        }
                                      },
                                      "right" : {
                                        "type" : "hexstr",
                                        "value" : "0x0008"
                                      }
                                    }
                                  },
                                  "right" : {
                                    "type" : "hexstr",
                                    "value" : "0xffff"
                                  }
                                }
                              },
                              "right" : {
                                "type" : "hexstr",
                                "value" : "0xfff0"
                              }
                            }
                          },
                          "right" : {
                            "type" : "hexstr",
                            "value" : "0xffff"
                          }
                        }
                      },
                      "right" : {
                        "type" : "hexstr",
                        "value" : "0x0020"
                      }
                    }
                  },
                  "right" : {
                    "type" : "hexstr",
                    "value" : "0xffff"
                  }
                }
              }
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 348,
            "column" : 12,
            "source_fragment" : "hdr.ipv4.identification = hdr.ipv4.identification - 8 + 8 - 16 + 32"
          }
        }
      ]
    },
    {
      "name" : "my_drop",
      "id" : 19,
      "runtime_data" : [],
      "primitives" : [
        {
          "op" : "drop",
          "parameters" : [],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 74,
            "column" : 4,
            "source_fragment" : "mark_to_drop()"
          }
        }
      ]
    },
    {
      "name" : "egress.rewrite_mac",
      "id" : 20,
      "runtime_data" : [
        {
          "name" : "smac",
          "bitwidth" : 48
        }
      ],
      "primitives" : [
        {
          "op" : "assign",
          "parameters" : [
            {
              "type" : "field",
              "value" : ["ethernet", "srcAddr"]
            },
            {
              "type" : "runtime_data",
              "value" : 0
            }
          ],
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 367,
            "column" : 8,
            "source_fragment" : "hdr.ethernet.srcAddr = smac"
          }
        }
      ]
    }
  ],
  "pipelines" : [
    {
      "name" : "ingress",
      "id" : 0,
      "source_info" : {
        "filename" : "demo5.p4_16_with_mirroring_rules.p4",
        "line" : 116,
        "column" : 8,
        "source_fragment" : "ingress"
      },
      "init_table" : "ingress.compute_ipv4_hashes",
      "tables" : [
        {
          "name" : "ingress.compute_ipv4_hashes",
          "id" : 0,
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 151,
            "column" : 10,
            "source_fragment" : "compute_ipv4_hashes"
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [6, 7, 5],
          "actions" : ["ingress.doNothing1", "ingress.doNothing2", "ingress.compute_lkp_ipv4_hash"],
          "base_default_next" : "ingress.ipv4_da_lpm",
          "next_tables" : {
            "ingress.doNothing1" : "ingress.ipv4_da_lpm",
            "ingress.doNothing2" : "ingress.ipv4_da_lpm",
            "ingress.compute_lkp_ipv4_hash" : "ingress.ipv4_da_lpm"
          },
          "default_entry" : {
            "action_id" : 5,
            "action_const" : false,
            "action_data" : [],
            "action_entry_const" : false
          }
        },
        {
          "name" : "ingress.ipv4_da_lpm",
          "id" : 1,
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 190,
            "column" : 10,
            "source_fragment" : "ipv4_da_lpm"
          },
          "key" : [
            {
              "match_type" : "lpm",
              "name" : "hdr.ipv4.dstAddr",
              "target" : ["ipv4", "dstAddr"],
              "mask" : null
            }
          ],
          "match_type" : "lpm",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : true,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [8, 9, 10, 11],
          "actions" : ["ingress.set_l2ptr_with_stat", "ingress.set_ecmp_group_idx", "ingress.my_drop_with_stat", "ingress.my_drop_with_stat_aatish"],
          "base_default_next" : "node_4",
          "next_tables" : {
            "ingress.set_l2ptr_with_stat" : "node_4",
            "ingress.set_ecmp_group_idx" : "node_4",
            "ingress.my_drop_with_stat" : "node_4",
            "ingress.my_drop_with_stat_aatish" : "node_4"
          },
          "default_entry" : {
            "action_id" : 11,
            "action_const" : false,
            "action_data" : [],
            "action_entry_const" : false
          }
        },
        {
          "name" : "tbl_act",
          "id" : 2,
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 345,
            "column" : 36,
            "source_fragment" : "="
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [17],
          "actions" : ["act"],
          "base_default_next" : "node_7",
          "next_tables" : {
            "act" : "node_7"
          },
          "default_entry" : {
            "action_id" : 17,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        },
        {
          "name" : "tbl_act_0",
          "id" : 3,
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 348,
            "column" : 36,
            "source_fragment" : "="
          },
          "key" : [],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [18],
          "actions" : ["act_0"],
          "base_default_next" : "node_7",
          "next_tables" : {
            "act_0" : "node_7"
          },
          "default_entry" : {
            "action_id" : 18,
            "action_const" : true,
            "action_data" : [],
            "action_entry_const" : true
          }
        },
        {
          "name" : "ingress.ecmp_group",
          "id" : 4,
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 221,
            "column" : 10,
            "source_fragment" : "ecmp_group"
          },
          "key" : [
            {
              "match_type" : "exact",
              "name" : "meta.fwd_metadata.ecmp_group_idx",
              "target" : ["scalars", "metadata._fwd_metadata_ecmp_group_idx2"],
              "mask" : null
            }
          ],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 32768,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [12, 13, 0, 1],
          "actions" : ["ingress.set_ecmp_path_idx", "ingress.set_l2ptr", "top_level_action", "NoAction"],
          "base_default_next" : "node_9",
          "next_tables" : {
            "ingress.set_ecmp_path_idx" : "node_9",
            "ingress.set_l2ptr" : "node_9",
            "top_level_action" : "node_9",
            "NoAction" : "node_9"
          },
          "default_entry" : {
            "action_id" : 1,
            "action_const" : false,
            "action_data" : [],
            "action_entry_const" : false
          }
        },
        {
          "name" : "ingress.ecmp_path",
          "id" : 5,
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 235,
            "column" : 10,
            "source_fragment" : "ecmp_path"
          },
          "key" : [
            {
              "match_type" : "exact",
              "name" : "meta.fwd_metadata.ecmp_group_idx",
              "target" : ["scalars", "metadata._fwd_metadata_ecmp_group_idx2"],
              "mask" : null
            },
            {
              "match_type" : "exact",
              "name" : "meta.fwd_metadata.ecmp_path_selector",
              "target" : ["scalars", "metadata._fwd_metadata_ecmp_path_selector3"],
              "mask" : null
            }
          ],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 32768,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [14, 2],
          "actions" : ["ingress.set_l2ptr", "NoAction"],
          "base_default_next" : "ingress.mac_da_01",
          "next_tables" : {
            "ingress.set_l2ptr" : "ingress.mac_da_01",
            "NoAction" : "ingress.mac_da_01"
          },
          "default_entry" : {
            "action_id" : 2,
            "action_const" : false,
            "action_data" : [],
            "action_entry_const" : false
          }
        },
        {
          "name" : "ingress.mac_da_01",
          "id" : 6,
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 289,
            "column" : 10,
            "source_fragment" : "mac_da_01"
          },
          "key" : [
            {
              "match_type" : "exact",
              "name" : "meta.fwd_metadata.l2ptr",
              "target" : ["scalars", "metadata._fwd_metadata_l2ptr4"],
              "mask" : null
            }
          ],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [15, 3],
          "actions" : ["ingress.set_bd_dmac_intf", "my_drop"],
          "base_default_next" : "ingress.mac_da_02",
          "next_tables" : {
            "ingress.set_bd_dmac_intf" : "ingress.mac_da_02",
            "my_drop" : "ingress.mac_da_02"
          },
          "default_entry" : {
            "action_id" : 3,
            "action_const" : false,
            "action_data" : [],
            "action_entry_const" : false
          }
        },
        {
          "name" : "ingress.mac_da_02",
          "id" : 7,
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 312,
            "column" : 10,
            "source_fragment" : "mac_da_02"
          },
          "key" : [
            {
              "match_type" : "exact",
              "name" : "meta.fwd_metadata.l2ptr",
              "target" : ["scalars", "metadata._fwd_metadata_l2ptr4"],
              "mask" : null
            }
          ],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [16, 4],
          "actions" : ["ingress.set_bd_dmac_intf_continued_by_Aatish", "my_drop"],
          "base_default_next" : null,
          "next_tables" : {
            "ingress.set_bd_dmac_intf_continued_by_Aatish" : null,
            "my_drop" : null
          },
          "default_entry" : {
            "action_id" : 4,
            "action_const" : false,
            "action_data" : [],
            "action_entry_const" : false
          }
        }
      ],
      "action_profiles" : [],
      "conditionals" : [
        {
          "name" : "node_4",
          "id" : 0,
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 343,
            "column" : 12,
            "source_fragment" : "hdr.ipv4.srcAddr[0:0] == (true ? 0 : 0)"
          },
          "expression" : {
            "type" : "expression",
            "value" : {
              "op" : "==",
              "left" : {
                "type" : "expression",
                "value" : {
                  "op" : "&",
                  "left" : {
                    "type" : "field",
                    "value" : ["ipv4", "srcAddr"]
                  },
                  "right" : {
                    "type" : "hexstr",
                    "value" : "0x01"
                  }
                }
              },
              "right" : {
                "type" : "hexstr",
                "value" : "0x00"
              }
            }
          },
          "true_next" : "tbl_act",
          "false_next" : "tbl_act_0"
        },
        {
          "name" : "node_7",
          "id" : 1,
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 350,
            "column" : 12,
            "source_fragment" : "meta.fwd_metadata.nexthop_type != NEXTHOP_TYPE_L2PTR"
          },
          "expression" : {
            "type" : "expression",
            "value" : {
              "op" : "!=",
              "left" : {
                "type" : "field",
                "value" : ["scalars", "metadata._fwd_metadata_nexthop_type1"]
              },
              "right" : {
                "type" : "hexstr",
                "value" : "0x00"
              }
            }
          },
          "true_next" : "ingress.ecmp_group",
          "false_next" : "ingress.mac_da_01"
        },
        {
          "name" : "node_9",
          "id" : 2,
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 353,
            "column" : 24,
            "source_fragment" : "meta.fwd_metadata.nexthop_type != NEXTHOP_TYPE_L2PTR"
          },
          "expression" : {
            "type" : "expression",
            "value" : {
              "op" : "!=",
              "left" : {
                "type" : "field",
                "value" : ["scalars", "metadata._fwd_metadata_nexthop_type1"]
              },
              "right" : {
                "type" : "hexstr",
                "value" : "0x00"
              }
            }
          },
          "true_next" : "ingress.ecmp_path",
          "false_next" : "ingress.mac_da_01"
        }
      ]
    },
    {
      "name" : "egress",
      "id" : 1,
      "source_info" : {
        "filename" : "demo5.p4_16_with_mirroring_rules.p4",
        "line" : 362,
        "column" : 8,
        "source_fragment" : "egress"
      },
      "init_table" : "egress.send_frame",
      "tables" : [
        {
          "name" : "egress.send_frame",
          "id" : 8,
          "source_info" : {
            "filename" : "demo5.p4_16_with_mirroring_rules.p4",
            "line" : 369,
            "column" : 10,
            "source_fragment" : "send_frame"
          },
          "key" : [
            {
              "match_type" : "exact",
              "name" : "meta.fwd_metadata.out_bd",
              "target" : ["scalars", "metadata._fwd_metadata_out_bd5"],
              "mask" : null
            }
          ],
          "match_type" : "exact",
          "type" : "simple",
          "max_size" : 1024,
          "with_counters" : false,
          "support_timeout" : false,
          "direct_meters" : null,
          "action_ids" : [20, 19],
          "actions" : ["egress.rewrite_mac", "my_drop"],
          "base_default_next" : null,
          "next_tables" : {
            "egress.rewrite_mac" : null,
            "my_drop" : null
          },
          "default_entry" : {
            "action_id" : 19,
            "action_const" : false,
            "action_data" : [],
            "action_entry_const" : false
          }
        }
      ],
      "action_profiles" : [],
      "conditionals" : []
    }
  ],
  "checksums" : [
    {
      "name" : "cksum",
      "id" : 0,
      "source_info" : {
        "filename" : "demo5.p4_16_with_mirroring_rules.p4",
        "line" : 412,
        "column" : 8,
        "source_fragment" : "update_checksum(hdr.ipv4.isValid() && hdr.ipv4.ihl == 5, ..."
      },
      "target" : ["ipv4", "hdrChecksum"],
      "type" : "generic",
      "calculation" : "calc_1",
      "verify" : false,
      "update" : true,
      "if_cond" : {
        "type" : "expression",
        "value" : {
          "op" : "and",
          "left" : {
            "type" : "expression",
            "value" : {
              "op" : "d2b",
              "left" : null,
              "right" : {
                "type" : "field",
                "value" : ["ipv4", "$valid$"]
              }
            }
          },
          "right" : {
            "type" : "expression",
            "value" : {
              "op" : "==",
              "left" : {
                "type" : "field",
                "value" : ["ipv4", "ihl"]
              },
              "right" : {
                "type" : "hexstr",
                "value" : "0x05"
              }
            }
          }
        }
      }
    },
    {
      "name" : "cksum_0",
      "id" : 1,
      "source_info" : {
        "filename" : "demo5.p4_16_with_mirroring_rules.p4",
        "line" : 394,
        "column" : 8,
        "source_fragment" : "verify_checksum(hdr.ipv4.isValid() && hdr.ipv4.ihl == 5, ..."
      },
      "target" : ["ipv4", "hdrChecksum"],
      "type" : "generic",
      "calculation" : "calc_2",
      "verify" : true,
      "update" : false,
      "if_cond" : {
        "type" : "expression",
        "value" : {
          "op" : "and",
          "left" : {
            "type" : "expression",
            "value" : {
              "op" : "d2b",
              "left" : null,
              "right" : {
                "type" : "field",
                "value" : ["ipv4", "$valid$"]
              }
            }
          },
          "right" : {
            "type" : "expression",
            "value" : {
              "op" : "==",
              "left" : {
                "type" : "field",
                "value" : ["ipv4", "ihl"]
              },
              "right" : {
                "type" : "hexstr",
                "value" : "0x05"
              }
            }
          }
        }
      }
    }
  ],
  "force_arith" : [],
  "extern_instances" : [],
  "field_aliases" : [
    [
      "queueing_metadata.enq_timestamp",
      ["standard_metadata", "enq_timestamp"]
    ],
    [
      "queueing_metadata.enq_qdepth",
      ["standard_metadata", "enq_qdepth"]
    ],
    [
      "queueing_metadata.deq_timedelta",
      ["standard_metadata", "deq_timedelta"]
    ],
    [
      "queueing_metadata.deq_qdepth",
      ["standard_metadata", "deq_qdepth"]
    ],
    [
      "intrinsic_metadata.ingress_global_timestamp",
      ["standard_metadata", "ingress_global_timestamp"]
    ],
    [
      "intrinsic_metadata.egress_global_timestamp",
      ["standard_metadata", "egress_global_timestamp"]
    ],
    [
      "intrinsic_metadata.lf_field_list",
      ["standard_metadata", "lf_field_list"]
    ],
    [
      "intrinsic_metadata.mcast_grp",
      ["standard_metadata", "mcast_grp"]
    ],
    [
      "intrinsic_metadata.resubmit_flag",
      ["standard_metadata", "resubmit_flag"]
    ],
    [
      "intrinsic_metadata.egress_rid",
      ["standard_metadata", "egress_rid"]
    ],
    [
      "intrinsic_metadata.recirculate_flag",
      ["standard_metadata", "recirculate_flag"]
    ]
  ],
  "program" : "demo5.p4_16_with_mirroring_rules.p4",
  "__meta__" : {
    "version" : [2, 18],
    "compiler" : "https://github.com/p4lang/p4c"
  }
}